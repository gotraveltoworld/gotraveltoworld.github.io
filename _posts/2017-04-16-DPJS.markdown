---
layout: post
title:  "Design pattern for JS"
date:   2017-04-16 23:00:38 +0800
categories: Javascript
---

# Singleton
>Practice the JS design pattern for singleton.<br>
>Date : 2017-04-16<br>
>Author : T.H. Lin<br>

### Memo
* Single instance is created by function(hide the 'new' operator).
* Be careful the 'this' operator.
* All scope only one instance(singleton).

### Code
```Javascript
// Singleton Design Pattern in JS example
// Author : T.H. Lin

let Singleton = function (tag) {
  this.tag = tag;
  this.instance = null;
};

Singleton.getInstance = function (tag) {
  if (!this.instance) { // Checking object is exist or not.
    console.log(tag); // Only show once time
    this.instance = new Singleton(tag);//  Use 'new' operator in function.
  }
  return this.instance;
}

let a = Singleton.getInstance('sn1'); // Be careful the 'this' operator.
let b = Singleton.getInstance('sn2');

console.log(a);
console.log(b);
console.log(a === b); // a === b, because object only is created once time.
```
### 中文備註

* singleton pattern(單例模式)是保證一個類別並只有實例化一次，該實例方法有提供相應的存取方法。
* 通常實現方式利用全域變數或是提供全域可存取的方法(JS可以用函數的性質暫存其實例化的狀態)。
* 基本定義就是只有實例化一次(後續取用都是用同一個類別)。
* 單例模式當然也可以搭配其他模式來進行不同的模式的組合。
* 由於本模式只會創建唯一的實例，因此也可以設計成當狀態改變時才會創建唯一的實例。而且該實例之後都不會重複創建，例如：網頁的提示訊息框架(DOM節點可能在使用者觸發事件才會創建，之後也不會重複創建)